# ----------------------------------------------------------------------------
# ContikiPy
# ----------------------------------------------------------------------------
contiki:
wd:
fmt:     cooja
log:     /tools/cooja/build/COOJA.testlog
out:     /home/mike/Results/ATOMIC_test
csc:
target:

# ----------------------------------------------------------------------------
# Results Options
# packet regex ... https://regex101.com/r/26KZoD/15/
# ----------------------------------------------------------------------------
logtypes:
  - type:    cooja
    fmt_re:  '^\s*(?P<time>\d+):\s+(?P<id>\d+):'

formatters:
  dictionary:
    # atomic
    - type:  atomic-energy
      regex: \s+(?P<level>[\w,-]+):\s+(?P<module>\w+)\s*ep:(?P<epoch>\d+)\s+(?P<op_type>\w+)(?:\s*h:(?P<hops>\d+)|\s+np:(?P<n_phases>\d+)|\s+gon:(?P<gon>\d+)|\s+ron:(?P<ron>\d+)|\s+con:(?P<con>\d+)\s+\(r (?P<all_rdc>\d+\W{1,2}\d+)| \/ (?P<rdc>\d+\W{1,2}\d+))+.*?$
    - type:  atomic-op
      regex: \s+(?P<level>[\w,-]+):\s+(?P<module>\w+)\s*ep:(?P<epoch>\d+)\s+(?P<op_type>\w+)(?:\s*h:(?P<hops>\d+)|\s+p:\(\s*(?P<c_phase>\d+)|\/(?P<n_phases>\d+)\) |.*:\(\s*(?P<c_time>\d+)|\/(?P<op_duration>\d+))+.*?$
    # usdn
    - type:   pow
      regex:  .*P \d+.\d+ (?P<seqid>\d+).*\(radio (?P<all_radio>\d+\W{1,2}\d+).* (?P<radio>\d+[.,-]{1,2}\d+).* (?P<all_tx>\d+[.,-]{1,2}\d+).* (?P<tx>\d+\W{1,2}\d+).* (?P<all_listen>\d+[.,-]{1,2}\d+).* (?P<listen>\d+[.,-]{1,2}\d+)
    - type:   app
      regex:  \s*\[(?P<level>STAT):\s*(?P<module>[\w,-]+)\s*]\s*(?P<status>(TX|RX))\s+(?P<typ>\S+)(?:\s+s:(?P<src>\d+)|\s+d:(?P<dest>\d+)|\s+a:(?P<app>\d+)|\s+id:(?P<seq>\d+)|\s+h:(?P<hops>[1-5])|\s+m:(?P<mac>\d+))+.*?$
    - type:   sdn
      regex:  \s*\[(?P<level>STAT):\s*(?P<module>[\w,-]+)\s*]\s*(?P<status>(OUT|BUF|IN))\s+(?P<typ>\S+)(?:\s+s:(?P<src>\d+)|\s+d:(?P<dest>\d+)|\s+a:(?P<app>\d+)|\s+id:(?P<seq>\d+)|\s+h:(?P<hops>[1-5])|\s+m:(?P<mac>\d+))+.*?$
    - type:   node
      regex:  \s*\[(?P<level>STAT):\s*(?P<module>[\w,-]+)\s*]\s*h:(?P<rank>\d+), n:(?P<degree>\d+)
    - type:   icmp
      regex:  \s*\[(?P<level>STAT):\s*(?P<module>[\w,-]+)\s*]\s*(?:\s+type:(?P<type>\d+)|\s+code:(?P<code>\d+))+.*?$
    - type:   join
      regex:  \s*\[(?P<level>STAT):\s*(?P<module>[\w,-]+)\s*]\s*(?:\s+n:(?P<node>\d+)|\s+c:(?P<controller>\d+)|\s+dag:(?P<dag>\d+)|\s+dao:(?P<dao>\d+))+.*?$

# ----------------------------------------------------------------------------
# Multiflow
# ----------------------------------------------------------------------------
multiflow:
  - id:               1_flow
    NUM_APPS:         1
    flows:
      FLOWIDS:        1
      TXNODES:        0
      RXNODES:        1
      DELAY:          120
      BRMIN:          60
      BRMAX:          75


# ----------------------------------------------------------------------------
# Simulations
# ----------------------------------------------------------------------------
simulations:
  # 30 Node Atomic
  - desc:           ATM_30
    contiki:        /home/mike/Repos/atomic
    wd:             /home/mike/Repos/atomic/examples/atomic
    csc:            atomic-30-node.csc
    makeargs:
    regex:
      - 'atomic-energy'
      - 'atomic-op'
    plot:
      - atomic_vs_usdn_join_times
  # 30 Node Usdn
  - desc:           uSDN_30
    contiki:        /home/mike/Repos/usdn
    wd:             /home/mike/Repos/usdn/examples/ipv6/sdn-udp
    csc:            usdn-30-node.csc
    makeargs:
      MAC:          CSMA
      SDN:          1
      FTREFRESH:    1
      FTSRETRY:     1
      FORCENSU:     1
      NSUFREQ:      600  # NSU frequency actually helps over 0 frequency
    multiflow:      1_flow
    regex:
      - 'join'
    plot:
      - atomic_vs_usdn_join_times

# ----------------------------------------------------------------------------
# analysis (comparison) config
# ----------------------------------------------------------------------------
analysis:
  - sims:
    # which sims do we want to compare?
    - ATM_30
    - uSDN_30
    # which plots do we want to compare?
    plots:
      - atomic_vs_usdn_join_times
